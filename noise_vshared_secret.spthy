theory Noise
begin

builtins: asymmetric-encryption, hashing

functions:
    ECMult/3,
    HashSHA256/1,
    LengthBE1/1,
    LengthBE2/1,
    MACSHA256/2,
    TakeElem1Sizes32/1,
    Add0/1,
    Sub0/1,
    EncryptAEADGCMAES256/4,
    DecryptAEADGCMAES256/4

equations:
    Sub0(Add0(a0)) = a0,
    DecryptAEADGCMAES256(EncryptAEADGCMAES256(a0,a1,a2,a3),a1,a2,a3) = a0

// RULES //

// Client

rule Clnt_Step_0:
let
    // Assign False "vnsversion" "x0001"
    vnsversion = 'c5be0'
    // Assign False "vnsdh1" "x01"
    vnsdh1 = 'cfe91'
    // Assign False "vnscipher1" "x02"
    vnscipher1 = 'c4435'
    // Assign False "vnshash1" "x03"
    vnshash1 = 'c1efd'
    // Assign False "vnspattern1" "x32"
    vnspattern1 = 'c413f'
    // Calc False "f22" "Concat" ["vnsversion","vnsdh1","vnscipher1","vnshash1","vnspattern1"]
    f22 = <vnsversion,vnsdh1,vnscipher1,vnshash1,vnspattern1>
    // Assign False "o24" "f22"
    o24 = f22
    // Calc False "f25" "LengthBE2" ["o24"]
    f25 = LengthBE2(o24)
    // Calc False "f26" "Concat" ["f25","o24"]
    f26 = <f25,o24>
in
    [ ]
    --[  ]->
    [ // "step fact"
      !Clnt_Step_0('Client')
      // OutPubl "f26"
    , Out(f26)
    ]

rule Clnt_Step_1:
let
    // Assign False "vpattern2" "ascii_KKpsk2"
    vpattern2 = 'c78f0'
    // Assign False "vdh2" "ascii_25519"
    vdh2 = 'c81ba'
    // Assign False "vencr2" "ascii_AESGCM"
    vencr2 = 'c57bf'
    // Assign False "vhash2" "ascii_SHA256"
    vhash2 = 'c3d2b'
    // Calc False "f50" "Add0" ["x00000000_8"]
    f50 = Add0('c76c2')
    // Assign False "vtext2" "ascii_HeyBob!"
    vtext2 = 'c2cf1'
    // Assign False "vpsServ" "x1b1b1b1b_32"
    vpsServ = 'ca3d0'
    // Assign False "vpsClnt" "ascii_********************************"
    vpsClnt = 'caca9'
    // Assign False "vpeClnt" "x05050505_32"
    vpeClnt = 'c0284'
    // Assign False "o46" "xnull"
    o46 = 'c5897'
    // Assign False "vprologue" "xnull"
    vprologue = 'c5897'
    // Calc False "f68" "Concat" ["ascii_Noise","x5f","vpattern2","x5f","vdh2","x5f","vencr2","x5f","vhash2"]
    f68 = <'c2efd','c8d36',vpattern2,'c8d36',vdh2,'c8d36',vencr2,'c8d36',vhash2>
    // Calc False "f51" "Concat" ["x00000000","f50"]
    f51 = <'cdc66',f50>
    // Calc False "f44" "LengthBE2" ["vtext2"]
    f44 = LengthBE2(vtext2)
    // Calc False "f54" "ECMult" ["x001d","x0900000000000000000000000000000000000000000000000000000000000000","vpsServ"]
    f54 = ECMult('ca53d','c52b6',vpsServ)
    // Calc False "f84" "ECMult" ["x001d","x0900000000000000000000000000000000000000000000000000000000000000","vpsClnt"]
    f84 = ECMult('ca53d','c52b6',vpsClnt)
    // Calc False "f42" "ECMult" ["x001d","x0900000000000000000000000000000000000000000000000000000000000000","vpeClnt"]
    f42 = ECMult('ca53d','c52b6',vpeClnt)
    // Calc False "f71" "Concat" ["f68","x00000000_32"]
    f71 = <f68,'c688c'>
    // Calc False "f69" "LengthBE1" ["f68"]
    f69 = LengthBE1(f68)
    // Calc False "f45" "Concat" ["f44","vtext2"]
    f45 = <f44,vtext2>
    // Assign False "vsServ" "f54"
    vsServ = f54
    // Assign False "veClnt" "f42"
    veClnt = f42
    // Assign False "vsClnt" "f84"
    vsClnt = f84
    // Calc False "f72" "TakeElem1Sizes32" ["f71"]
    f72 = TakeElem1Sizes32(f71)
    // Calc False "f55" "ECMult" ["x001d","vsServ","vpsClnt"]
    f55 = ECMult('ca53d',vsServ,vpsClnt)
    // Calc False "f57" "ECMult" ["x001d","vsServ","vpeClnt"]
    f57 = ECMult('ca53d',vsServ,vpeClnt)
    // Calc False "f47" "Concat" ["f45","o46"]
    f47 = <f45,o46>
    // Calc False "f73" "MACSHA256" ["veClnt","f72"]
    f73 = MACSHA256(veClnt,f72)
    // Assign False "vesClnt" "f57"
    vesClnt = f57
    // Assign False "vssClnt" "f55"
    vssClnt = f55
    // Calc False "f81" "Concat" ["f72","vprologue"]
    f81 = <f72,vprologue>
    // Calc False "f74" "MACSHA256" ["x01","f73"]
    f74 = MACSHA256('cfe91',f73)
    // Calc False "f82" "HashSHA256" ["f81"]
    f82 = HashSHA256(f81)
    // Calc False "f75" "MACSHA256" ["vesClnt","f74"]
    f75 = MACSHA256(vesClnt,f74)
    // Calc False "f85" "Concat" ["f82","vsClnt"]
    f85 = <f82,vsClnt>
    // Calc False "f76" "MACSHA256" ["x01","f75"]
    f76 = MACSHA256('cfe91',f75)
    // Calc False "f86" "HashSHA256" ["f85"]
    f86 = HashSHA256(f85)
    // Calc False "f77" "MACSHA256" ["vssClnt","f76"]
    f77 = MACSHA256(vssClnt,f76)
    // Calc False "f87" "Concat" ["f86","vsServ"]
    f87 = <f86,vsServ>
    // Calc False "f78" "MACSHA256" ["x01","f77"]
    f78 = MACSHA256('cfe91',f77)
    // Calc False "f88" "HashSHA256" ["f87"]
    f88 = HashSHA256(f87)
    // Calc False "f79" "Concat" ["f78","x02"]
    f79 = <f78,'c4435'>
    // Calc False "f89" "Concat" ["f88","veClnt"]
    f89 = <f88,veClnt>
    // Calc False "f80" "MACSHA256" ["f79","f77"]
    f80 = MACSHA256(f79,f77)
    // Calc False "f90" "HashSHA256" ["f89"]
    f90 = HashSHA256(f89)
    // Calc False "f91" "EncryptAEADGCMAES256" ["f47","f51","f80","f90"]
    f91 = EncryptAEADGCMAES256(f47,f51,f80,f90)
    // Assign False "vct2" "f91"
    vct2 = f91
    // Calc False "f92" "Concat" ["veClnt","vct2"]
    f92 = <veClnt,vct2>
    // Assign False "o32" "f92"
    o32 = f92
    // Calc False "f33" "LengthBE2" ["o32"]
    f33 = LengthBE2(o32)
    // Calc False "f34" "Concat" ["f33","o32"]
    f34 = <f33,o32>
in
    [ // "step facts"
      !Clnt_Step_0('Client')
    ]
    --[ ]->
    [ // "step fact"
      !Clnt_Step_1('Client', f51, f80, f92, vct2, veClnt, vsClnt, f78, vpeClnt, vpsClnt, f90)
      // OutPubl "f34"
    , Out(f34)
    ]

rule Clnt_Step_2:
let
    // RevConcat [("f102",False),("o101",False)] "f103"
    f103 = <f102,o101>
in
    [ // "step facts"
      !Clnt_Step_0('Client')
    , !Clnt_Step_1('Client', f51, f80, f92, vct2, veClnt, vsClnt, f78, vpeClnt, vpsClnt, f90)
      // InPubl False "f103"
    , In(<f102,o101>)
    ]
    --[ ]->
    [ // "step fact"
      !Clnt_Step_2('Client')
    ]

rule Clnt_Step_3:
let
    // Calc False "f124" "MACSHA256" ["veServ","f78"]
    f124 = MACSHA256(veServ,f78)
    // Calc False "f136" "Concat" ["f90","vct2"]
    f136 = <f90,vct2>
    // Calc False "f121" "ECMult" ["x001d","veServ","vpsClnt"]
    f121 = ECMult('ca53d',veServ,vpsClnt)
    // Calc False "f123" "ECMult" ["x001d","veServ","vpeClnt"]
    f123 = ECMult('ca53d',veServ,vpeClnt)
    // Assign False "vpskvalue" "ascii_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
    vpskvalue = 'c3282'
    // Assign False "f142" "vct4"
    vct4 = f142
    // RevConcat [("veServ",False),("vct4",False)] "f143"
    f143 = <veServ,vct4>
    // Calc False "f137" "HashSHA256" ["f136"]
    f137 = HashSHA256(f136)
    // Calc False "f125" "MACSHA256" ["x01","f124"]
    f125 = MACSHA256('cfe91',f124)
    // Assign False "veeClnt" "f123"
    veeClnt = f123
    // Assign False "vseClnt" "f121"
    vseClnt = f121
    // Assign False "f143" "o106"
    o106 = f143
    // Calc False "f138" "Concat" ["f137","veServ"]
    f138 = <f137,veServ>
    // Calc False "f126" "MACSHA256" ["veeClnt","f125"]
    f126 = MACSHA256(veeClnt,f125)
    // RevConcat [("f107",False),("o106",False)] "f108"
    f108 = <f107,o106>
    // Calc False "f139" "HashSHA256" ["f138"]
    f139 = HashSHA256(f138)
    // Calc False "f127" "MACSHA256" ["x01","f126"]
    f127 = MACSHA256('cfe91',f126)
    // Calc False "f128" "MACSHA256" ["vseClnt","f127"]
    f128 = MACSHA256(vseClnt,f127)
    // Calc False "f129" "MACSHA256" ["x01","f128"]
    f129 = MACSHA256('cfe91',f128)
    // Calc False "f130" "MACSHA256" ["vpskvalue","f129"]
    f130 = MACSHA256(vpskvalue,f129)
    // Calc False "f131" "MACSHA256" ["x01","f130"]
    f131 = MACSHA256('cfe91',f130)
    // Calc False "f132" "Concat" ["f131","x02"]
    f132 = <f131,'c4435'>
    // Calc False "f133" "MACSHA256" ["f132","f130"]
    f133 = MACSHA256(f132,f130)
    // Calc False "f140" "Concat" ["f139","f133"]
    f140 = <f139,f133>
    // Calc False "f134" "Concat" ["f133","x03"]
    f134 = <f133,'c1efd'>
    // Calc False "f141" "HashSHA256" ["f140"]
    f141 = HashSHA256(f140)
    // Calc False "f135" "MACSHA256" ["f134","f130"]
    f135 = MACSHA256(f134,f130)
    // Calc False "f144" "DecryptAEADGCMAES256" ["f142","f51","f135","f141"]
    f144 = DecryptAEADGCMAES256(f142,f51,f135,f141)
    // Assign False "f119" "f144"
    f119 = f144
    // RevConcat [("f117",False),("o118",False)] "f119"
    f117 = fst(f119)
    // RevConcat [("f117",False),("o118",False)] "f119"
    o118 = snd(f119)
    // RevConcat [("f116",False),("vtext4",False)] "f117"
    f116 = fst(f117)
    // RevConcat [("f116",False),("vtext4",False)] "f117"
    vtext4 = snd(f117)
in
    [ // "step facts"
      !Clnt_Step_0('Client')
    , !Clnt_Step_1('Client', f51, f80, f92, vct2, veClnt, vsClnt, f78, vpeClnt, vpsClnt, f90)
    , !Clnt_Step_2('Client')
      // InPubl False "f108"
    , In(<f107,<veServ,f142>>)
    ]
    --[ 
        PSK('Client', '3', vpskvalue)
      , MSK('Client', f130)
      , VSE('Client', vseClnt)
      , AEAD('Client', '3', f144)
     ]->
    [ // "step fact"
      !Clnt_Step_3('Client', f131, vpskvalue)
    ]


rule Clnt_Step_4:
let
    // Assign False "vtext5" "ascii_OKthenHelloworld!"
    vtext5 = 'c75fa'
    // Calc False "f163" "MACSHA256" ["xnull","f131"]
    f163 = MACSHA256('c5897',f131)
    // Assign False "o153" "xnull"
    o153 = 'c5897'
    // Assign False "f161" "f51"
    f161 = f51
    // Calc False "f151" "LengthBE2" ["vtext5"]
    f151 = LengthBE2(vtext5)
    // Calc False "f164" "MACSHA256" ["x01","f163"]
    f164 = MACSHA256('cfe91',f163)
    // Calc False "f152" "Concat" ["f151","vtext5"]
    f152 = <f151,vtext5>
    // Assign False "vkeyi5" "f164"
    vkeyi5 = f164
    // Calc False "f154" "Concat" ["f152","o153"]
    f154 = <f152,o153>
    // Calc False "f165" "EncryptAEADGCMAES256" ["f154","f161","vkeyi5","xnull"]
    f165 = EncryptAEADGCMAES256(f154,f161,vkeyi5,'c5897')
    // Calc False "f166" "LengthBE2" ["f165"]
    f166 = LengthBE2(f165)
    // Calc False "f167" "Concat" ["f166","f165"]
    f167 = <f166,f165>
in
    [ // "step facts"
      !Clnt_Step_0('Client')
    , !Clnt_Step_1('Client', f51, f80, f92, vct2, veClnt, vsClnt, f78, vpeClnt, vpsClnt, f90)
    , !Clnt_Step_2('Client')
    , !Clnt_Step_3('Client', f131, vpskvalue)
    ]
    --[ PSK('Client', '4', vpskvalue) 
      , AEAD('Client', '4', f165)
    ]->
    [ // "step fact"
      !Clnt_Step_4('Client', f163, f164)
      // OutPubl "f167"
    , Out(f167)
    ]


rule Clnt_Step_5:
let
    // RevConcat [("f212",False),("f211",False)] "f213"
    f213 = <f212,f211>
    // Assign False "vpattern3" "ascii_KKpsk2"
    vpattern3 = 'c78f0'
    // Assign False "vdh3" "ascii_25519"
    vdh3 = 'c81ba'
    // Assign False "vencr3" "ascii_AESGCM"
    vencr3 = 'c57bf'
    // Assign False "vhash3" "ascii_SHA256"
    vhash3 = 'c3d2b'
    // Assign False "f208" "f164"
    f208 = f164
    // Assign False "f207" "f163"
    f207 = f163
    // Assign False "f183" "f51"
    f183 = f51
    // Calc False "f189" "Concat" ["ascii_Noise","x5f","vpattern3","x5f","vdh3","x5f","vencr3","x5f","vhash3"]
    f189 = <'c2efd','c8d36',vpattern3,'c8d36',vdh3,'c8d36',vencr3,'c8d36',vhash3>
    // Calc False "f209" "Concat" ["f208","x02"]
    f209 = <f208,'c4435'>
    // Calc False "f190" "LengthBE1" ["f189"]
    f190 = LengthBE1(f189)
    // Calc False "f210" "MACSHA256" ["f209","f207"]
    f210 = MACSHA256(f209,f207)
    // Assign False "vkeyr6" "f210"
    vkeyr6 = f210
    // Calc False "f215" "DecryptAEADGCMAES256" ["f211","f183","vkeyr6","xnull"]
    f215 = DecryptAEADGCMAES256(f211,f183,vkeyr6,'c5897')
    // Assign False "f175" "f215"
    f175 = f215
    // RevConcat [("f173",False),("o174",False)] "f175"
    f173 = fst(f175)
    // RevConcat [("f173",False),("o174",False)] "f175"
    o174 = snd(f175)
    // RevConcat [("f172",False),("vtext6",False)] "f173"
    f172 = fst(f173)
    // RevConcat [("f172",False),("vtext6",False)] "f173"
    vtext6 = snd(f173)
in
    [ // "step facts"
      !Clnt_Step_0('Client')
    , !Clnt_Step_1('Client', f51, f80, f92, vct2, veClnt, vsClnt, f78, vpeClnt, vpsClnt, f90)
    , !Clnt_Step_2('Client')
    , !Clnt_Step_3('Client', f131, vpskvalue)
    , !Clnt_Step_4('Client', f163, f164)
      // InPubl False "f213"
    , In(<f212,f211>)
    ]
    --[ PSK('Client', '5', vpskvalue)
      , AEAD('Server', '5', f215) ]->
    [ // "step fact"
      !Clnt_Step_5('Client')
    ]

// Server

rule Serv_Step_0:
let
    // RevConcat [("vnsversion",False),("vnsdh1",False),("vnscipher1",False),("vnshash1",False),("vnspattern1",False)] "f20"
    f20 = <vnsversion,vnsdh1,vnscipher1,vnshash1,vnspattern1>
    // Assign False "f20" "o22"
    o22 = f20
    // RevConcat [("f23",False),("o22",False)] "f24"
    f24 = <f23,o22>
in
    [ // InPubl False "f24"
      In(<f23,<vnsversion,vnsdh1,vnscipher1,vnshash1,vnspattern1>>)
    ]
    --[ ]->
    [ // "step fact"
      !Serv_Step_0('Server')
    ]

rule Serv_Step_1:
let
    // Assign False "vpattern2" "ascii_KKpsk2"
    vpattern2 = 'c78f0'
    // Assign False "vdh2" "ascii_25519"
    vdh2 = 'c81ba'
    // Assign False "vencr2" "ascii_AESGCM"
    vencr2 = 'c57bf'
    // Assign False "vhash2" "ascii_SHA256"
    vhash2 = 'c3d2b'
    // Calc False "f52" "Add0" ["x00000000_8"]
    f52 = Add0('c76c2')
    // Assign False "vpsClnt" "ascii_********************************"
    vpsClnt = 'caca9'
    // Assign False "vpsServ" "x1b1b1b1b_32"
    vpsServ = 'ca3d0'
    // Assign False "vprologue" "xnull"
    vprologue = 'c5897'
    // Assign False "f93" "vct2"
    vct2 = f93
    // Calc False "f70" "Concat" ["ascii_Noise","x5f","vpattern2","x5f","vdh2","x5f","vencr2","x5f","vhash2"]
    f70 = <'c2efd','c8d36',vpattern2,'c8d36',vdh2,'c8d36',vencr2,'c8d36',vhash2>
    // Calc False "f53" "Concat" ["x00000000","f52"]
    f53 = <'cdc66',f52>
    // RevConcat [("veClnt",False),("vct2",False)] "f94"
    f94 = <veClnt,vct2>
    // Calc False "f56" "ECMult" ["x001d","x0900000000000000000000000000000000000000000000000000000000000000","vpsClnt"]
    f56 = ECMult('ca53d','c52b6',vpsClnt)
    // Calc False "f88" "ECMult" ["x001d","x0900000000000000000000000000000000000000000000000000000000000000","vpsServ"]
    f88 = ECMult('ca53d','c52b6',vpsServ)
    // Calc False "f59" "ECMult" ["x001d","veClnt","vpsServ"]
    f59 = ECMult('ca53d',veClnt,vpsServ)
    // Calc False "f73" "Concat" ["f70","x00000000_32"]
    f73 = <f70,'c688c'>
    // Calc False "f71" "LengthBE1" ["f70"]
    f71 = LengthBE1(f70)
    // Assign False "f94" "o30"
    o30 = f94
    // Assign False "vesServ" "f59"
    vesServ = f59
    // Assign False "vsClnt" "f56"
    vsClnt = f56
    // Assign False "vsServ" "f88"
    vsServ = f88
    // Calc False "f74" "TakeElem1Sizes32" ["f73"]
    f74 = TakeElem1Sizes32(f73)
    // RevConcat [("f31",False),("o30",False)] "f32"
    f32 = <f31,o30>
    // Calc False "f57" "ECMult" ["x001d","vsClnt","vpsServ"]
    f57 = ECMult('ca53d',vsClnt,vpsServ)
    // Calc False "f75" "MACSHA256" ["veClnt","f74"]
    f75 = MACSHA256(veClnt,f74)
    // Assign False "vssServ" "f57"
    vssServ = f57
    // Calc False "f83" "Concat" ["f74","vprologue"]
    f83 = <f74,vprologue>
    // Calc False "f76" "MACSHA256" ["x01","f75"]
    f76 = MACSHA256('cfe91',f75)
    // Calc False "f84" "HashSHA256" ["f83"]
    f84 = HashSHA256(f83)
    // Calc False "f77" "MACSHA256" ["vesServ","f76"]
    f77 = MACSHA256(vesServ,f76)
    // Calc False "f85" "Concat" ["f84","vsClnt"]
    f85 = <f84,vsClnt>
    // Calc False "f78" "MACSHA256" ["x01","f77"]
    f78 = MACSHA256('cfe91',f77)
    // Calc False "f86" "HashSHA256" ["f85"]
    f86 = HashSHA256(f85)
    // Calc False "f79" "MACSHA256" ["vssServ","f78"]
    f79 = MACSHA256(vssServ,f78)
    // Calc False "f89" "Concat" ["f86","vsServ"]
    f89 = <f86,vsServ>
    // Calc False "f80" "MACSHA256" ["x01","f79"]
    f80 = MACSHA256('cfe91',f79)
    // Calc False "f90" "HashSHA256" ["f89"]
    f90 = HashSHA256(f89)
    // Calc False "f81" "Concat" ["f80","x02"]
    f81 = <f80,'c4435'>
    // Calc False "f91" "Concat" ["f90","veClnt"]
    f91 = <f90,veClnt>
    // Calc False "f82" "MACSHA256" ["f81","f79"]
    f82 = MACSHA256(f81,f79)
    // Calc False "f92" "HashSHA256" ["f91"]
    f92 = HashSHA256(f91)
    // Calc False "f95" "DecryptAEADGCMAES256" ["f93","f53","f82","f92"]
    f95 = DecryptAEADGCMAES256(f93,f53,f82,f92)
    // Assign False "f49" "f95"
    f49 = f95
    // RevConcat [("f47",False),("o48",False)] "f49"
    f47 = fst(f49)
    // RevConcat [("f47",False),("o48",False)] "f49"
    o48 = snd(f49)
    // RevConcat [("f46",False),("vtext2",False)] "f47"
    f46 = fst(f47)
    // RevConcat [("f46",False),("vtext2",False)] "f47"
    vtext2 = snd(f47)
in
    [ // "step facts"
      !Serv_Step_0('Server')
      // InPubl False "f32"
    , In(<f31,<veClnt,f93>>)
    ]
    --[ ]->
    [ // "step fact"
      !Serv_Step_1('Server', f53, f80, f92, vct2, veClnt, vsClnt, f90)
    ]

rule Serv_Step_2:
let
    // Assign False "o104" "xnull"
    o104 = 'c5897'
    // Calc False "f105" "LengthBE2" ["o104"]
    f105 = LengthBE2(o104)
    // Calc False "f106" "Concat" ["f105","o104"]
    f106 = <f105,o104>
in
    [ // "step facts"
      !Serv_Step_0('Server')
    , !Serv_Step_1('Server', f53, f80, f92, vct2, veClnt, vsClnt, f90)
    ]
    --[ ]->
    [ // "step fact"
      !Serv_Step_2('Server')
      // OutPubl "f106"
    , Out(f106)
    ]


rule Serv_Step_3:
let
    // Assign False "vtext4" "ascii_HeyAlice!"
    vtext4 = 'c9f99'
    // Calc False "f137" "Concat" ["f92","vct2"]
    f137 = <f92,vct2>
    // Assign False "vpeServ" "x0b0b0b0b_32"
    vpeServ = 'c8a36'
    // Assign False "vpskvalue" "ascii_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
    vpskvalue = 'c3282'
    // Assign False "o119" "xnull"
    o119 = 'c5897'
    // Calc False "f117" "LengthBE2" ["vtext4"]
    f117 = LengthBE2(vtext4)
    // Calc False "f138" "HashSHA256" ["f137"]
    f138 = HashSHA256(f137)
    // Calc False "f124" "ECMult" ["x001d","veClnt","vpeServ"]
    f124 = ECMult('ca53d',veClnt,vpeServ)
    // Calc False "f122" "ECMult" ["x001d","vsClnt","vpeServ"]
    f122 = ECMult('ca53d',vsClnt,vpeServ)
    // Calc False "f114" "ECMult" ["x001d","x0900000000000000000000000000000000000000000000000000000000000000","vpeServ"]
    f114 = ECMult('ca53d','c52b6',vpeServ)
    // Calc False "f118" "Concat" ["f117","vtext4"]
    f118 = <f117,vtext4>
    // Assign False "veServ" "f114"
    veServ = f114
    // Assign False "veeServ" "f124"
    veeServ = f124
    // Assign False "vseServ" "f122"
    vseServ = f122
    // Calc False "f139" "Concat" ["f138","veServ"]
    f139 = <f138,veServ>
    // Calc False "f125" "MACSHA256" ["veServ","f80"]
    f125 = MACSHA256(veServ,f80)
    // Calc False "f120" "Concat" ["f118","o119"]
    f120 = <f118,o119>
    // Calc False "f140" "HashSHA256" ["f139"]
    f140 = HashSHA256(f139)
    // Calc False "f126" "MACSHA256" ["x01","f125"]
    f126 = MACSHA256('cfe91',f125)
    // Calc False "f127" "MACSHA256" ["veeServ","f126"]
    f127 = MACSHA256(veeServ,f126)
    // Calc False "f128" "MACSHA256" ["x01","f127"]
    f128 = MACSHA256('cfe91',f127)
    // Calc False "f129" "MACSHA256" ["vseServ","f128"]
    f129 = MACSHA256(vseServ,f128)
    // Calc False "f130" "MACSHA256" ["x01","f129"]
    f130 = MACSHA256('cfe91',f129)
    // Calc False "f131" "MACSHA256" ["vpskvalue","f130"]
    f131 = MACSHA256(vpskvalue,f130)
    // Calc False "f132" "MACSHA256" ["x01","f131"]
    f132 = MACSHA256('cfe91',f131)
    // Calc False "f133" "Concat" ["f132","x02"]
    f133 = <f132,'c4435'>
    // Calc False "f134" "MACSHA256" ["f133","f131"]
    f134 = MACSHA256(f133,f131)
    // Calc False "f141" "Concat" ["f140","f134"]
    f141 = <f140,f134>
    // Calc False "f135" "Concat" ["f134","x03"]
    f135 = <f134,'c1efd'>
    // Calc False "f142" "HashSHA256" ["f141"]
    f142 = HashSHA256(f141)
    // Calc False "f136" "MACSHA256" ["f135","f131"]
    f136 = MACSHA256(f135,f131)
    // Calc False "f143" "EncryptAEADGCMAES256" ["f120","f53","f136","f142"]
    f143 = EncryptAEADGCMAES256(f120,f53,f136,f142)
    // Assign False "vct4" "f143"
    vct4 = f143
    // Calc False "f144" "Concat" ["veServ","vct4"]
    f144 = <veServ,vct4>
    // Assign False "o110" "f144"
    o110 = f144
    // Calc False "f111" "LengthBE2" ["o110"]
    f111 = LengthBE2(o110)
    // Calc False "f112" "Concat" ["f111","o110"]
    f112 = <f111,o110>
in
    [ // "step facts"
      !Serv_Step_0('Server')
    , !Serv_Step_1('Server', f53, f80, f92, vct2, veClnt, vsClnt, f90)
    , !Serv_Step_2('Server')
    ]
    --[ 
        PSK('Server', '3', vpskvalue) 
      , MSK('Server', f131)
      , VSE('Server', vseServ)
      , AEAD('Server', '3', f143)
    ]->
    [ // "step fact"
      !Serv_Step_3('Server', f132, vpskvalue)
      // OutPubl "f112"
    , Out(f112)
    ]


rule Serv_Step_4:
let
    // RevConcat [("f165",False),("f164",False)] "f166"
    f166 = <f165,f164>
    // Calc False "f162" "MACSHA256" ["xnull","f132"]
    f162 = MACSHA256('c5897',f132)
    // Assign False "f160" "f53"
    f160 = f53
    // Calc False "f163" "MACSHA256" ["x01","f162"]
    f163 = MACSHA256('cfe91',f162)
    // Assign False "vkeyi5" "f163"
    vkeyi5 = f163
    // Calc False "f168" "DecryptAEADGCMAES256" ["f164","f160","vkeyi5","xnull"]
    f168 = DecryptAEADGCMAES256(f164,f160,vkeyi5,'c5897')
    // Assign False "f153" "f168"
    f153 = f168
    // RevConcat [("f151",False),("o152",False)] "f153"
    f151 = fst(f153)
    // RevConcat [("f151",False),("o152",False)] "f153"
    o152 = snd(f153)
    // RevConcat [("f150",False),("vtext5",False)] "f151"
    f150 = fst(f151)
    // RevConcat [("f150",False),("vtext5",False)] "f151"
    vtext5 = snd(f151)
in
    [ // "step facts"
      !Serv_Step_0('Server')
    , !Serv_Step_1('Server', f53, f80, f92, vct2, veClnt, vsClnt, f90)
    , !Serv_Step_2('Server')
    , !Serv_Step_3('Server', f132, vpskvalue)
      // InPubl False "f166"
    , In(<f165,f164>)
    ]
    --[ PSK('Server', '4', vpskvalue)
      , AEAD('Server', '4', f168)
    ]->
    [ // "step fact"
      !Serv_Step_4('Server', f162, f163, f53)
    ]


rule Serv_Step_5:
let
    // Assign False "vtext6" "ascii_Ciphertext!"
    vtext6 = 'ced63'
    // Assign False "vpattern3" "ascii_KKpsk2"
    vpattern3 = 'c78f0'
    // Assign False "vdh3" "ascii_25519"
    vdh3 = 'c81ba'
    // Assign False "vencr3" "ascii_AESGCM"
    vencr3 = 'c57bf'
    // Assign False "vhash3" "ascii_SHA256"
    vhash3 = 'c3d2b'
    // Assign False "f210" "f163"
    f210 = f163
    // Assign False "f209" "f162"
    f209 = f162
    // Assign False "o176" "xnull"
    o176 = 'c5897'
    // Assign False "f185" "f53"
    f185 = f53
    // Calc False "f174" "LengthBE2" ["vtext6"]
    f174 = LengthBE2(vtext6)
    // Calc False "f191" "Concat" ["ascii_Noise","x5f","vpattern3","x5f","vdh3","x5f","vencr3","x5f","vhash3"]
    f191 = <'c2efd','c8d36',vpattern3,'c8d36',vdh3,'c8d36',vencr3,'c8d36',vhash3>
    // Calc False "f211" "Concat" ["f210","x02"]
    f211 = <f210,'c4435'>
    // Calc False "f175" "Concat" ["f174","vtext6"]
    f175 = <f174,vtext6>
    // Calc False "f192" "LengthBE1" ["f191"]
    f192 = LengthBE1(f191)
    // Calc False "f212" "MACSHA256" ["f211","f209"]
    f212 = MACSHA256(f211,f209)
    // Calc False "f177" "Concat" ["f175","o176"]
    f177 = <f175,o176>
    // Assign False "vkeyr6" "f212"
    vkeyr6 = f212
    // Calc False "f213" "EncryptAEADGCMAES256" ["f177","f185","vkeyr6","xnull"]
    f213 = EncryptAEADGCMAES256(f177,f185,vkeyr6,'c5897')
    // Calc False "f214" "LengthBE2" ["f213"]
    f214 = LengthBE2(f213)
    // Calc False "f215" "Concat" ["f214","f213"]
    f215 = <f214,f213>
in
    [ // "step facts"
      !Serv_Step_0('Server')
    , !Serv_Step_1('Server', f53, f80, f92, vct2, veClnt, vsClnt, f90)
    , !Serv_Step_2('Server')
    , !Serv_Step_3('Server', f132, vpskvalue)
    , !Serv_Step_4('Server', f162, f163, f53)
    ]
    --[ PSK('Server', '5', vpskvalue)
      , AEAD('Server', '5', f213) ]->
    [ // "step fact"
      !Serv_Step_5('Server')
      // OutPubl "f215"
    , Out(f215)
    ]

// lemmas
/*
lemma Noise_vpskvalue_weak:
    exists-trace
    " Ex vpskvalue msk_secret vseCode #cl1 #sv1 #i1 #i2 #i3 #j1 #j2 #j3.
    (
        MSK('Client', msk_secret) @ #i1 &
        PSK('Client', '3', vpskvalue) @ #i1 &
        PSK('Client', '4', vpskvalue) @ #i2 &
        PSK('Client', '5', vpskvalue) @ #i3 &
        MSK('Server', msk_secret) @ #j1 &
        PSK('Server', '3', vpskvalue) @ #j1 &
        PSK('Server', '4', vpskvalue) @ #j2 &
        PSK('Server', '5', vpskvalue) @ #j3 &
        VSE('Client', vseCode) @ #cl1 &
        VSE('Server', vseCode) @ #sv1
        & not
        (
            Ex #k.
            (
                (KU(vpskvalue) @ #k)
            )
        )
    )
    "
*/
/*
lemma Noise_weak:
    exists-trace
    " Ex vpskvalue mess #k1 #k2 #i1 #j1.
    (
        PSK('Client', '3', vpskvalue) @ #i1 &
        PSK('Server', '3', vpskvalue) @ #j1 &
        AEAD('Client', '4', mess) @ #k1 &
        AEAD('Server', '4', mess) @ #k2
        & not
        (
            Ex #k.
            (
                (KU(vpskvalue) @ #k)
            )
        )
    )
    "
*/
/*
lemma Noise_vsharedSecret:
    all-traces
    " All vpskvalue mess #k1 #k2 #i1 #j1.
    (
        PSK('Client', '3', vpskvalue) @ #i1 &
        PSK('Server', '3', vpskvalue) @ #j1 &
        AEAD('Client', '4', mess) @ #k1 &
        AEAD('Server', '4', mess) @ #k2
        & not
        (
            Ex #k_adv1.
            (
                (KU(vpskvalue) @ #k_adv1)
            )
        )
    )
    ==>
    (
        not
        (
            Ex #k_adv2.
            (
                K(mess) @ #k_adv2
            )
        )
    )
    "
*/
/*
lemma Noise_secret_5_weak:
    exists-trace
    " Ex vpskvalue mess #k1 #k2 #i1 #j1.
    (
        PSK('Client', '3', vpskvalue) @ #i1 &
        PSK('Server', '3', vpskvalue) @ #j1 &
        AEAD('Client', '5', mess) @ #k1 &
        AEAD('Server', '5', mess) @ #k2
        & not
        (
            Ex #k_adv1.
            (
                (KU(vpskvalue) @ #k_adv1)
            )
        )
    )
    "
*/
lemma Noise_secret_4_weak:
    exists-trace
    " Ex vpskvalue mess #k1 #k2 #i1 #j1.
    (
        PSK('Client', '3', vpskvalue) @ #i1 &
        PSK('Server', '3', vpskvalue) @ #j1 &
        AEAD('Client', '4', mess) @ #k1 &
        AEAD('Server', '4', mess) @ #k2
        & not
        (
            Ex #k_adv1.
            (
                (KU(vpskvalue) @ #k_adv1)
            )
        )
    )
    "

/*
lemma Noise_secret_5:
    all-traces
    " All vpskvalue mess #k1 #k2 #i1 #j1.
    (
        PSK('Client', '3', vpskvalue) @ #i1 &
        PSK('Server', '3', vpskvalue) @ #j1 &
        AEAD('Client', '5', mess) @ #k1 &
        AEAD('Server', '5', mess) @ #k2
        & not
        (
            Ex #k_adv1.
            (
                (KU(vpskvalue) @ #k_adv1)
            )
        )
    )
    ==>
    (
        not
        (
            Ex #k_adv2.
            (
                K(mess) @ #k_adv2
            )
        )
    )
    "
*/
end